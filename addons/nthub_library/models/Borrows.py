# -*- coding: utf-8 -*-
from datetime import timedelta, datetime, date
from odoo import models, fields, api , _
from odoo.exceptions import ValidationError as UserError
import cv2
import re
from pyzbar.pyzbar import decode
from datetime import datetime
from dateutil.relativedelta import relativedelta as rd
import subprocess


from odoo import http
from odoo.http import request
'''
The Borrows class represents a model for book borrowings in the context of an application built using the Odoo framework. 
It extends the models.Model class, which is the base class for all Odoo models.
The _name attribute is used to specify the internal name of the model. In this case,
the internal name is set to 'books.borrows'.
This name is used to identify the model in the database and in various places within the Odoo framework.
The _description attribute provides a description for the model. In this case, it is set to 'books.borrows'.
The class defines several fields that represent different aspects of a book borrowing
'''
class Borrows(models.Model):
    _name = 'books.borrows'
    _description = 'books.borrows'
    _inherit = 'mail.thread'


    code_id = fields.Many2one('library.card', string='Th·∫ª B·∫°n ƒê·ªçc')
    name_library_card = fields.Char(related='code_id.name_borrower', redonly = True, string = "T√™n B·∫°n ƒê·ªçc",size=250)
    name_card_id = fields.Many2one('res.partner', related='code_id.student_id', string="T√™n B·∫°n ƒê·ªçc")
    id_student = fields.Char(string="M√£ Sinh Vi√™n", size=256, related='code_id.id_student',readonly=True)


    start_borrow = fields.Datetime(string="Ng√†y M∆∞·ª£n", default=lambda self: fields.Datetime.now())
    state = fields.Selection([('draft', 'NH√ÅP'),
                              ('running', 'ƒêANG TI·∫æN H√ÄNH'),
                              ('delayed', 'TR·ªÑ'),
                              ('ended', 'K·∫æT TH√öC'),
                              ('reserve','ƒê·∫∂T TR∆Ø·ªöC')
                              ], default="draft", string='state')
    end_borrow = fields.Datetime(string="Ng√†y Tr·∫£", store=True,
                                 compute='_compute_end_borrow')

    color = fields.Integer()
    duration = fields.Integer()
    received_date = fields.Datetime()
    delay_duration = fields.Float(string="Delay Duration", readonly=True)
    delay_penalties_id = fields.Many2one('delay.penalities', string="Ph·∫°t Tr√¨ Ho√£n")
    borrows_duration = fields.Float(string="Th·ªùi H·∫°n M∆∞·ª£n", default = 6)
    
    book_copy_list_ids = fields.Many2many('book.copies')
    book_copy_id = fields.Many2one('book.copies', string='Book Copy')
    
    partner_id = fields.Many2one('res.partner', string='Partner')

    borrow_id = fields.Char(string='M√£ M∆∞·ª£n', compute='_default_borrow_id', store=True)
    return_date = fields.Date(string='Ng√†y Ho√†n Tr·∫£')

    reserve_date = fields.Datetime(string="Ng√†y ƒê·∫∑t Tr∆∞·ªõc")
    cancel_reserve = fields.Datetime(string="Ng√†y H·ªßy ƒê·∫∑t Tr∆∞·ªõc")
    # search borrower
    @api.model
    def process_qr_scan(self):
        # Gi·∫£ s·ª≠ action_scan_qr_return_borrow tr·∫£ v·ªÅ book_id
        book_id = self.action_scan_qr_return_borrow()
        if book_id:
            return {
                'type': 'ir.actions.act_window',
                'name': 'T√¨m ki·∫øm theo ID s√°ch',
                'res_model': 'books.borrows',
                'view_type': 'form',
                'view_mode': 'tree,form',
                'target': 'current',
                'domain': [('book_id.dkcd', '=', book_id)],
                'context': {'default_book_id.dkcd': book_id}
            }
        else:
            return {
                'type': 'ir.actions.act_window_close'
            }
    def action_scan_qr_return_borrow(self):
        a = 10
        # M·ªü camera
        cap = cv2.VideoCapture(0)

        # Ki·ªÉm tra xem camera c√≥ ƒë∆∞·ª£c m·ªü kh√¥ng
        if not cap.isOpened():
            print("Kh√¥ng th·ªÉ m·ªü camera. H√£y ch·∫Øc ch·∫Øn r·∫±ng kh√¥ng c√≥ ·ª©ng d·ª•ng kh√°c s·ª≠ d·ª•ng camera.")
            return
        # L·∫∑p ƒë·ªÉ hi·ªÉn th·ªã h√¨nh ·∫£nh t·ª´ camera
        while True:
            # ƒê·ªçc frame t·ª´ camera
            ret, frame = cap.read()

            # Hi·ªÉn th·ªã frame
            cv2.imshow('Camera', frame)

            # Qu√©t m√£ QR
            decoded_objects = decode(frame)
            for obj in decoded_objects:
                qr_data = obj.data.decode('utf-8')
                
                print(f'M√£ QR ƒë√£ qu√©t: \n{qr_data}')
                # match = re.search(r'(\d+)', qr_data)
                # match = re.search(r'(\d+)', qr_data)
                match = re.search(r'(.+)', qr_data)

                if match:
                    book_id = match.group(1).strip()
                    print(f"Id scaned {book_id}")
                    return book_id
                return False
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        # Gi·∫£i ph√≥ng camera v√† ƒë√≥ng c·ª≠a s·ªï hi·ªÉn th·ªã khi tho√°t v√≤ng l·∫∑p
        cap.release()
        cv2.destroyAllWindows()        

    # t·∫°o m√£ m∆∞·ª£n c·ªßa phi·∫øu m∆∞·ª£n 
    @api.depends('id_student')
    def _default_borrow_id(self):
        if self.id_student:
            student_id = self.id_student
            borrow_count = self.search_count([('id_student', '=', student_id)])
            self.borrow_id = '{}_{}'.format(student_id, borrow_count + 1)
        else:
            # Set a placeholder or temporary value for borrow_id when complete data isn't available.
            self.borrow_id = 'Incomplete_Info'
         

    @api.model
    def write(self, vals):
        if 'book_copy_list_ids' in vals:
            res = super(Borrows, self).write(vals)
            new_books = self.book_copy_list_ids.ids
            print("new_books", new_books)
            if len(new_books) > self.code_id.book_limit:
                raise UserError(f'S·ªë s√°ch m∆∞·ª£n v∆∞·ª£t qu√° gi·ªõi h·∫°n cho ph√©p ({self.code_id.book_limit}).')
            for book in self.book_copy_list_ids:
                if book.state == 'available':
                    book.state = 'borrowed'
                    self.code_id.book_limit -= 1
                    print("book limit", self.code_id.book_limit)
            if self.book_copy_list_ids:
                self.state = 'running'
            return res
        return super(Borrows, self).write(vals)
    def action_report(self):
        # function to report wornning
        return self.env.ref('nthub_library.report_borrows_warning_id').report_action(self)


    # t√≠nh to√°n ng√†y tr·∫£
    @api.depends("start_borrow", "borrows_duration")
    def _compute_end_borrow(self):
        for rec in self:
            if rec.start_borrow:
                rec.end_borrow = rec.start_borrow + rd(months=rec.borrows_duration)            
            
    # chuy·ªÉn tr·∫°ng th√°i v·ªÅ k·∫øt th√∫c
    def action_ended(self):
        current_books = set(self.book_copy_list_ids.ids)
        print("current_books", current_books)
        for record in self:
            for book in record.book_copy_list_ids:
                book.state = 'available'
            record.code_id.book_limit += len(current_books)
            record.book_copy_list_ids = [(5, 0, 0)]  # Clear all books from the record
            record.state = 'ended'
            record.return_date = fields.Date.today()

    # chuy·ªÉn tr·∫°ng th√°i v·ªÅ nh√°p
    def action_draft(self):
        for rec in self:
            if rec.state == 'ended':
                rec.state = 'draft'
            else:
                raise UserError('Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i v·ªÅ d·∫°ng nh√°p. B·∫£n ghi kh√¥ng ·ªü tr·∫°ng th√°i "ended".')

    @api.onchange('end_borrow', 'received_date')
    def onchange_dates(self):
        '''
        to calculate delay_duration based on end_borrow and received_date
         delay_duration = received_date - end_borrow
        '''
        if self.end_borrow and self.received_date:
            delta = self.received_date - self.end_borrow
            if delta.days < 0:
                nod = 0
            else:
                nod = delta.days
            self.delay_duration = nod
        else:
            self.delay_duration = 0


    # ki·ªÉm tra th·ªùi gian m∆∞·ª£n s√°ch
    def update_delayed_status(self):
        # cron job every day to check state =running $ end_borrow < date today  change state from running to delayed
        today = date.today()
        running_borrows = self.env['books.borrows'].search([('state', '=', 'running'), ('end_borrow', '<', today)])
        for rec in running_borrows:
            if rec:
                rec.state = 'delayed'


    def action_barcode_name_student(self, vals):
        """ Scan student barcode using zbarcam (·ªïn ƒë·ªãnh, kh√¥ng d√πng cv2) """
        try:
            # M·ªü zbarcam
            process = subprocess.Popen(['zbarcam', '--raw'], stdout=subprocess.PIPE)
            print("üé• ƒêang m·ªü camera ƒë·ªÉ qu√©t m√£ sinh vi√™n...")

            for line in iter(process.stdout.readline, b''):
                barcode_data = line.decode('utf-8').strip()
                print(f'üì¶ M√£ Barcode ƒë√£ qu√©t: {barcode_data}')

                match = re.search(r'(\d+)', barcode_data)
                if match:
                    barcode_name = int(match.group(1))
                    print(f'üéØ ID Student Barcode: {barcode_name}')

                    # T√¨m th·∫ª sinh vi√™n
                    student = self.env['library.card'].search([('id_student', '=', barcode_name)], limit=1)

                    if student:
                        self.code_id = student.id
                        print(f'‚úÖ ƒê√£ t√¨m th·∫•y th·∫ª b·∫°n ƒë·ªçc: {student.name_borrower}')
                    else:
                        raise UserError('‚ùå Kh√¥ng t√¨m th·∫•y sinh vi√™n trong h·ªá th·ªëng.')

                    process.terminate()  # K·∫øt th√∫c qu√©t sau khi t√¨m ƒë∆∞·ª£c
                    return
        except FileNotFoundError:
            raise UserError("Kh√¥ng t√¨m th·∫•y `zbarcam`. C√†i ƒë·∫∑t b·∫±ng: sudo apt install zbar-tools")
        except Exception as e:
            raise UserError(f"L·ªói khi qu√©t m√£ sinh vi√™n: {e}")


    def action_scan_qr_book_copies(self, vals):
        """Qu√©t nhi·ªÅu m√£ QR s√°ch m∆∞·ª£n b·∫±ng zbarcam"""
        if not self.code_id:
            raise UserError('X√°c ƒë·ªãnh th·∫ª b·∫°n ƒë·ªçc tr∆∞·ªõc khi th√™m s√°ch m∆∞·ª£n.')
        try:
            process = subprocess.Popen(['zbarcam', '--raw'], stdout=subprocess.PIPE)
            print("üé• ƒêang m·ªü camera ƒë·ªÉ qu√©t m√£ s√°ch (nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng)...")
            for line in iter(process.stdout.readline, b''):
                barcode_data = line.decode('utf-8').strip()
                print(f'üì¶ M√£ Barcode ƒë√£ qu√©t: {barcode_data}')
                match = re.search(r'(\d+)', barcode_data)
                if not match:
                    print("‚ùå Kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c m√£ s·ªë.")
                    continue

                barcode_book_copies = int(match.group(1))
                print(f'üéØ DKCB: {barcode_book_copies}')
                book_copies = self.env['book.copies'].search([('DK_CB', '=', barcode_book_copies)], limit=2)

                if len(book_copies) > 1:
                    raise UserError(f'‚ö†Ô∏è C√≥ nhi·ªÅu b·∫£n sao s√°ch v·ªõi m√£ {barcode_book_copies}.')
                elif not book_copies:
                    raise UserError('‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n sao s√°ch trong h·ªá th·ªëng.')

                book_copy = book_copies[0]
                print("book_copy", book_copy)
                if book_copy in self.book_copy_list_ids:
                    process.terminate()
                    raise UserError(f'‚ö†Ô∏è S√°ch {book_copy.book_id.name} - {book_copy.DK_CB} ƒë√£ c√≥ trong danh s√°ch m∆∞·ª£n.')
                if book_copy.state == 'borrowed':
                    process.terminate()
                    raise UserError(f'‚õî S√°ch {book_copy.book_id.name} - {book_copy.DK_CB} ƒëang ƒë∆∞·ª£c m∆∞·ª£n.')
                if book_copy.state == 'reserve':
                    process.terminate()
                    raise UserError(f'‚õî S√°ch {book_copy.book_id.name} - {book_copy.DK_CB} ƒëang ƒë∆∞·ª£c ƒë·∫∑t tr∆∞·ªõc.')

                self.book_copy_list_ids = [(4, book_copy.id)]
                # self.book_copy_list_ids += [(4, book_copy.id)]
                # self.write({'book_copy_list_ids': [(4, book_copy.id)]})
                process.terminate()
                print(f'‚úÖ ƒê√£ th√™m s√°ch: {book_copy.book_id.name} - {book_copy.DK_CB}')
        except FileNotFoundError:
            raise UserError("Kh√¥ng t√¨m th·∫•y `zbarcam`. C√†i ƒë·∫∑t b·∫±ng: sudo apt install zbar-tools")
        except KeyboardInterrupt:
            print("\nüõë D·ª´ng qu√©t m√£ s√°ch.")
            process.terminate()
        except Exception as e:
            process.terminate()
            raise UserError(f"L·ªói khi qu√©t m√£ s√°ch: {e}")


    def action_reserve(self):
        self.state = 'reserve'
        for book in self.book_copy_list_ids:
            book.state = 'reserve'

    def action_change_reserve_to_borrow(self):
        for record in self:
            if record.state == 'reserve':
                record.state = 'running'
                for book in record.book_copy_list_ids:
                    book.state = 'borrowed'
                record.code_id.book_limit -= len(record.book_copy_list_ids)
                record.start_borrow = fields.Datetime.now()
                print("Reserve records have been changed to borrow.")
        return True
class ResPartner(models.Model):
    _inherit = 'res.partner'

    borrow_ids = fields.One2many('books.borrows', 'name_card_id', string='Books')
    # card_no = fields.One2many('library.card','student_id', string='Library Card')    
    card_no_id = fields.Many2one('library.card', string='Library Card')    
    # library_card_code = fields.Char(related='card_no.code', string='Library Card Code')